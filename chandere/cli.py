# Copyright (C) 2017 Jakob Kreuze, All Rights Reserved.
#
# This file is part of Chandere.
#
# Chandere is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# Chandere is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Chandere. If not, see <http://www.gnu.org/licenses/>.

"""Command-line argument definitions."""

import argparse
import sys
import textwrap

from chandere import __doc__, __version__
from chandere.util import list_scrapers, load_scraper

HELP_INDENT_WIDTH = 24


class CustomHelp(argparse.HelpFormatter):
    """Modifications to argparse's default HelpFormatter."""
    def _fill_text(self, text, width, indent):
        filled = []
        for line in text.splitlines(keepends=True):
            filled.append(indent + line)
        return "".join(filled)

    def _split_lines(self, text, width):
        return text.splitlines()

    def add_usage(self, usage, actions, groups, prefix=None):
        prefix = prefix or "Usage: "
        both = super(CustomHelp, self)
        return both.add_usage(usage, actions, groups, prefix)


def _wrap(line: str, end="\n\n"):
    """Wraps the line such that, when included in the help page
    generated by argparse, the entire help line fits within a standard
    80 columns.
    """
    return textwrap.fill(line.strip(), width=80 - HELP_INDENT_WIDTH) + end


class ScrapersAction(argparse.Action):
    """Lists all scraping modules."""
    def __call__(self, parser, namespace, values, option_string=None):
        for website in list_scrapers():
            module = load_scraper(website)
            print("{}: Version {}, by {}".format(
                website,
                module.__version__,
                module.__author__
            ))
        sys.exit(0)


PARSER = argparse.ArgumentParser(
    add_help=False,
    formatter_class=CustomHelp,
    usage="%(prog)s (TARGETS) [-s ALIAS] [OPTIONS]",
    description=_wrap(__doc__)
)
PARSER.register("action", "scrapers", ScrapersAction)


DOCUMENTATION = PARSER.add_argument_group("Documentation")
DOCUMENTATION.add_argument(
    "-h",
    "--help",
    action="help",
    help=_wrap(
        "Display this help page and exit.",
        end=""
    )
)
DOCUMENTATION.add_argument(
    "-V",
    "--version",
    action="version",
    version=__version__,
    help=_wrap(
        "Display the currently installed version and exit.",
        end=""
    )
)
DOCUMENTATION.add_argument(
    "--list-scrapers",
    action="scrapers",
    nargs=0,
    help=_wrap(
        "Display all scrapers that can be specified with -w."
    )
)


SCRAPER_OPTIONS = PARSER.add_argument_group("Scraping Options")
SCRAPER_OPTIONS.add_argument(
    "targets",
    metavar="TARGETS",
    nargs="+",
    help=_wrap(
        "Targets to download from.",
        end=""
    )
)
SCRAPER_OPTIONS.add_argument(
    "-w",
    "--website",
    metavar="X",
    default="4chan",
    help=_wrap(
        "The website to scrape from."
    )
)
SCRAPER_OPTIONS.add_argument(
    "--custom-scraper",
    metavar="X",
    help=_wrap(
        "[Document me!]"
    )
)


OUTPUT_OPTIONS = PARSER.add_argument_group("Output Options")
OUTPUT_OPTIONS.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help=_wrap(
        "Provides more verbose runtime information."
    )
)
OUTPUT_OPTIONS.add_argument(
    "-o",
    "--output",
    metavar="DIR",
    default="./{filename}.{ext}",
    help=_wrap(
        "A template for output filenames. Defaults to './{filename}.{ext}', "
        "which preserves the original filename and saves it to the current "
        "working directory. See the manpage for specific details on usage.",
        end=""
    )
)
