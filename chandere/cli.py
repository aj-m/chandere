"""Command-line argument definitions."""

import argparse
import textwrap

from chandere import __doc__, __version__

HELP_INDENT_WIDTH = 24


class CustomHelp(argparse.HelpFormatter):
    """Modifications to argparse's default HelpFormatter."""
    def _fill_text(self, text, width, indent):
        filled = []
        for line in text.splitlines(keepends=True):
            filled.append(indent + line)
        return "".join(filled)

    def _split_lines(self, text, width):
        return text.splitlines()

    def add_usage(self, usage, actions, groups, prefix=None):
        prefix = prefix or "Usage: "
        both = super(CustomHelp, self)
        return both.add_usage(usage, actions, groups, prefix)


def wrap(line: str, end="\n\n"):
    """Wraps the line such that, when included in the help page
    generated by argparse, the entire help line fits within a standard
    80 columns.
    """
    return textwrap.fill(line.strip(), width=80 - HELP_INDENT_WIDTH) + end


PARSER = argparse.ArgumentParser(
    add_help=False,
    formatter_class=CustomHelp,
    usage="%(prog)s (TARGETS) [-s ALIAS] [OPTIONS]",
    description=wrap(__doc__)
)


DOCUMENTATION = PARSER.add_argument_group("Documentation")
DOCUMENTATION.add_argument(
    "-h",
    "--help",
    action="help",
    help=wrap(
        "Display this help page and exit.",
        end=""
    )
)
DOCUMENTATION.add_argument(
    "-V",
    "--version",
    action="version",
    version=__version__,
    help=wrap(
        "Display the currently installed version and exit."
    )
)


SCRAPER_OPTIONS = PARSER.add_argument_group("Scraping Options")
SCRAPER_OPTIONS.add_argument(
    "targets",
    metavar="TARGETS",
    nargs="+",
    help=wrap(
        "Targets to download from.",
        end=""
    )
)
SCRAPER_OPTIONS.add_argument(
    "-w",
    "--website",
    metavar="X",
    default="4chan",
    help=wrap(
        "The website to be scraped from."
    )
)


OUTPUT_OPTIONS = PARSER.add_argument_group("Output Options")
OUTPUT_OPTIONS.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help=wrap(
        "Provides more verbose runtime information."
    )
)
OUTPUT_OPTIONS.add_argument(
    "-o",
    "--output",
    metavar="DIR",
    default="./{filename}.{ext}",
    help=wrap(
        "A template for output filenames. Defaults to './{filename}.{ext}', "
        "which preserves the original filename and saves it to the current "
        "working directory. See the manpage for specific details on usage.",
        end=""
    )
)
